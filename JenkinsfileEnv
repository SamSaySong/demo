pipeline {
    agent any // Ho·∫∑c ch·ªâ ƒë·ªãnh m·ªôt Jenkins agent c·ª• th·ªÉ n·∫øu b·∫°n c√≥ nhi·ªÅu node

    // ƒê·ªãnh nghƒ©a c√°c bi·∫øn m√¥i tr∆∞·ªùng cho pipeline
    environment {
        PYTHON_VERSION_TO_INSTALL = '3.10' // Phi√™n b·∫£n Python b·∫°n mu·ªën ƒë·∫£m b·∫£o c√†i ƒë·∫∑t
        PYTHON_CMD = "python${env.PYTHON_VERSION_TO_INSTALL}" // L·ªánh Python d·ª± ki·∫øn
        VENV_DIR = "venv_robot_project_py${env.PYTHON_VERSION_TO_INSTALL}" // T√™n th∆∞ m·ª•c cho m√¥i tr∆∞·ªùng ·∫£o
    }

    stages {
        stage('Checkout Source Code') {
            steps {
                echo 'Starting to clone the Git repository...'
                git branch: 'main', url: 'https://github.com/SamSaySong/demo.git' 
                echo 'Git repository cloned successfully!'
                sh 'ls -la' // Li·ªát k√™ t·∫•t c·∫£ n·ªôi dung th∆∞ m·ª•c ƒë·ªÉ x√°c nh·∫≠n
            }
        }

        stage('Check and Install Python') {
            steps {
                echo "Checking for Python ${env.PYTHON_VERSION_TO_INSTALL}..."
                script {
                    def pythonExists = sh(script: "command -v ${env.PYTHON_CMD}", returnStatus: true) == 0

                    if (!pythonExists) {
                        echo "Python ${env.PYTHON_VERSION_TO_INSTALL} not found. Attempting to install..."
                        // Ki·ªÉm tra n·∫øu python3 c√≥ th·ªÉ l√† phi√™n b·∫£n m·ª•c ti√™u
                        def defaultPython3Version = sh(script: "python3 --version || true", returnStdout: true).trim()
                        if (defaultPython3Version.startsWith("Python ${env.PYTHON_VERSION_TO_INSTALL}")) {
                             echo "Python3 is already version ${env.PYTHON_VERSION_TO_INSTALL}. Using 'python3' command."
                             env.PYTHON_CMD = 'python3' // C·∫≠p nh·∫≠t ƒë·ªÉ d√πng 'python3' n·∫øu n√≥ ƒë√∫ng phi√™n b·∫£n
                        } else {
                            echo "Proceeding with installation of Python ${env.PYTHON_VERSION_TO_INSTALL}..."
                            // C√°c l·ªánh c√†i ƒë·∫∑t cho Debian/Ubuntu
                            // B∆Ø·ªöC N√ÄY Y√äU C·∫¶U QUY·ªÄN SUDO KH√îNG M·∫¨T KH·∫®U CHO USER JENKINS
                            sh """
                                sudo apt update
                                sudo apt install -y software-properties-common
                                sudo add-apt-repository -y ppa:deadsnakes/ppa
                                sudo apt update
                                sudo apt install -y ${env.PYTHON_CMD} ${env.PYTHON_CMD}-venv
                                echo "Python ${env.PYTHON_VERSION_TO_INSTALL} and venv installed successfully."
                            """
                        }
                    } else {
                        echo "Python ${env.PYTHON_VERSION_TO_INSTALL} is already installed."
                    }

                    // X√°c minh l·∫°i Python sau khi ki·ªÉm tra/c√†i ƒë·∫∑t
                    def pythonVersionOutput = sh(script: "${env.PYTHON_CMD} --version", returnStdout: true).trim()
                    echo "S·ª≠ d·ª•ng Python: ${pythonVersionOutput}"
                }
            }
        }

        stage('Prepare Python Virtual Environment') {
            steps {
                echo "Creating dedicated virtual environment '${VENV_DIR}' for the project using ${PYTHON_CMD}..."
                script {
                    // T·∫°o m√¥i tr∆∞·ªùng ·∫£o
                    sh "${env.PYTHON_CMD} -m venv ${env.VENV_DIR}"

                    // C·∫≠p nh·∫≠t PATH ƒë·ªÉ c√°c l·ªánh 'pip' v√† 'robot' ch·∫°y t·ª´ m√¥i tr∆∞·ªùng ·∫£o n√†y
                    env.VIRTUAL_ENV_BIN = "${pwd()}/${env.VENV_DIR}/bin"
                    env.PATH = "${env.VIRTUAL_ENV_BIN}:${env.PATH}"
                    echo "Virtual environment created at: ${env.VIRTUAL_ENV_BIN}"
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                echo 'Installing dependencies from requirements.txt into the virtual environment...'
                script {
                    // C√†i ƒë·∫∑t ho·∫∑c n√¢ng c·∫•p pip trong m√¥i tr∆∞·ªùng ·∫£o
                    sh "pip install --upgrade pip"

                    // Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa requirements.txt
                    if (fileExists('requirements.txt')) {
                        sh "pip install -r requirements.txt"
                        echo "Dependencies from requirements.txt installed successfully."
                    } else {
                        echo "Warning: requirements.txt not found. Skipping dependency installation."
                    }

                    // ƒê·∫£m b·∫£o Robot Framework v√† SeleniumLibrary ƒë∆∞·ª£c c√†i ƒë·∫∑t
                    sh "pip install robotframework robotframework-seleniumlibrary"
                    echo "Robot Framework and SeleniumLibrary installed successfully."
                }
            }
        }

        stage('Run Robot Tests') {
            steps {
                echo 'Starting Robot Framework tests with demo.robot...'
                sh "robot demo.robot"
                echo 'Robot Framework tests execution finished.'
            }
        }
    }

    // C√°c h√†nh ƒë·ªông sau khi pipeline ho√†n t·∫•t
    post {
        always {
            echo 'Pipeline finished.'
            script {
                // D·ªçn d·∫πp m√¥i tr∆∞·ªùng ·∫£o
                if (fileExists("${env.VENV_DIR}")) {
                    echo "Cleaning up virtual environment: ${env.VENV_DIR}"
                    sh "rm -rf ${env.VENV_DIR}"
                    echo "Virtual environment ${env.VENV_DIR} removed."
                }
            }
            // D·ªçn d·∫πp c√°c file t·∫°m kh√°c
            sh "find . -name '*.pyc' -delete || true"
            sh "find . -name '__pycache__' -type d -exec rm -rf {} + || true"
            echo "Other temporary files cleaned up."
        }
        success {
            echo 'Robot Framework tests completed successfully! üéâ'
        }
        failure {
            echo 'Robot Framework tests failed. Check logs for details. ‚ùå'
        }
    }
}
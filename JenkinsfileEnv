// install Python 3.10, create a virtual environment, install dependencies, and run Robot Framework tests
// C√†i ƒë·∫∑t version python, install chrome n·∫øu agent ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t, t·∫°o m√¥i tr∆∞·ªùng ·∫£o, c√†i ƒë·∫∑t dependencies v√† ch·∫°y Robot Framework tests
pipeline {
    agent any

    environment {
        PYTHON_VERSION_TO_INSTALL = '3.10'
        PYTHON_CMD = "python3.10"
        VENV_DIR = "venv_robot_project_py3.10"
    }

    stages {
        stage('Setup Environment and Clone Code') {
            steps {
                echo 'Starting pipeline setup...'

                echo 'Cloning the Git repository...'
                git branch: 'main', url: 'https://github.com/SamSaySong/demo.git'
                sh 'ls -la'

                echo "Checking for Python ${env.PYTHON_VERSION_TO_INSTALL}..."
                script {
                    def pythonExists = sh(script: "command -v ${env.PYTHON_CMD}", returnStatus: true) == 0
                    if (!pythonExists) {
                        echo "Warning: Python ${env.PYTHON_VERSION_TO_INSTALL} not found. Attempting to install..."
                        sh """
                            sudo apt update
                            sudo apt install -y software-properties-common
                            sudo add-apt-repository -y ppa:deadsnakes/ppa
                            sudo apt update
                            sudo apt install -y ${env.PYTHON_CMD} ${env.PYTHON_CMD}-venv
                            echo "Python ${env.PYTHON_VERSION_TO_INSTALL} and venv installed successfully."
                        """
                    } else {
                        echo "Python ${env.PYTHON_VERSION_TO_INSTALL} is already installed."
                    }
                    def pythonVersionOutput = sh(script: "${env.PYTHON_CMD} --version", returnStdout: true).trim()
                    echo "Using Python: ${pythonVersionOutput}"
                }

                echo "Creating temporary virtual environment '${env.VENV_DIR}'..."
                sh "${env.PYTHON_CMD} -m venv ${env.VENV_DIR}"
            }
        }

        stage('Download and Install Dependencies') {
            steps {
                script {
                    echo 'Installing dependencies into the virtual environment...'
                    sh "${env.VENV_DIR}/bin/pip install --upgrade pip"

                    if (fileExists('requirements.txt')) {
                        sh "${env.VENV_DIR}/bin/pip install -r requirements.txt"
                        echo "Dependencies from requirements.txt installed successfully."
                    } else {
                        echo "Warning: requirements.txt not found. Skipping."
                    }

                    sh "${env.VENV_DIR}/bin/pip install robotframework robotframework-seleniumlibrary"
                    echo "Core dependencies installed."

                    echo "Installing Google Chrome browser..."
                    sh """
                        wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
                        sudo apt install -y ./google-chrome-stable_current_amd64.deb
                        google-chrome --version
                    """

                    echo "Downloading and configuring ChromeDriver..."
                    def apiUrl = "https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json"
                    def jsonOutput = sh(script: "curl -s ${apiUrl}", returnStdout: true).trim()

                    def versionsJson = new groovy.json.JsonSlurper().parseText(jsonOutput)
                    def stableVersionEntry = versionsJson.channels.Stable

                    if (!stableVersionEntry) {
                        error 'Could not find a stable version in the JSON output.'
                    }

                    def downloadUrl = stableVersionEntry.downloads.chromedriver.find { it.platform == 'linux64' }.url
                    echo "Download URL: ${downloadUrl}"

                    sh """
                        wget ${downloadUrl} -O chromedriver.zip
                        unzip -o chromedriver.zip
                        chmod +x chromedriver-linux64/chromedriver

                        sudo mv chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
                        sudo chmod +x /usr/local/bin/chromedriver

                        chromedriver --version
                    """
                }
            }
        }

        stage('Run Robot Tests') {
            steps {
                echo 'Starting Robot Framework tests with demo.robot...'
                // G·ªçi robot t·ª´ virtual environment
                sh "${env.VENV_DIR}/bin/robot -d results demo.robot"
                echo 'Robot Framework tests execution finished.'
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished.'
            sh "rm -rf ${env.VENV_DIR} || true"
            sh "rm -rf chromedriver-linux64 || true"
            sh "rm -f chromedriver.zip || true"
            sh "find . -name '*.pyc' -delete || true"
            sh "find . -name '__pycache__' -type d -exec rm -rf {} + || true"
            echo "Temporary files and environment cleaned up."
        }
        success {
            echo 'Robot Framework tests completed successfully! üéâ'
        }
        failure {
            echo 'Robot Framework tests failed. Check logs for details. ‚ùå'
        }
    }
}

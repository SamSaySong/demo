pipeline {
    agent any // Ho·∫∑c ch·ªâ ƒë·ªãnh m·ªôt Jenkins agent c·ª• th·ªÉ n·∫øu b·∫°n c√≥ nhi·ªÅu node

    // ƒê·ªãnh nghƒ©a c√°c bi·∫øn m√¥i tr∆∞·ªùng cho pipeline
    environment {
        PYTHON_VERSION_TO_INSTALL = '3.10'
        PYTHON_CMD = "python${env.PYTHON_VERSION_TO_INSTALL}"
        VENV_DIR = "venv_robot_project_py${env.PYTHON_VERSION_TO_INSTALL}"
        
        // Th∆∞ m·ª•c ƒë·ªÉ l∆∞u ChromeDriver t·∫°m th·ªùi
        CHROME_DRIVER_DIR = "${pwd()}/chromedriver-linux64"
    }

    stages {
        stage('Checkout Source Code') {
            steps {
                echo 'Starting to clone the Git repository...'
                git branch: 'main', url: 'https://github.com/SamSaySong/demo.git' 
                echo 'Git repository cloned successfully!'
                sh 'ls -la'
            }
        }

        stage('Check and Install Python') {
            steps {
                echo "Checking for Python ${env.PYTHON_VERSION_TO_INSTALL}..."
                script {
                    def pythonExists = sh(script: "command -v ${env.PYTHON_CMD}", returnStatus: true) == 0

                    if (!pythonExists) {
                        echo "Python ${env.PYTHON_VERSION_TO_INSTALL} not found. Attempting to install..."
                        def defaultPython3Version = sh(script: "python3 --version || true", returnStdout: true).trim()
                        if (defaultPython3Version.startsWith("Python ${env.PYTHON_VERSION_TO_INSTALL}")) {
                             echo "Python3 is already version ${env.PYTHON_VERSION_TO_INSTALL}. Using 'python3' command."
                             env.PYTHON_CMD = 'python3'
                        } else {
                            echo "Proceeding with installation of Python ${env.PYTHON_VERSION_TO_INSTALL}..."
                            sh """
                                sudo apt update
                                sudo apt install -y software-properties-common
                                sudo add-apt-repository -y ppa:deadsnakes/ppa
                                sudo apt update
                                sudo apt install -y ${env.PYTHON_CMD} ${env.PYTHON_CMD}-venv
                                echo "Python ${env.PYTHON_VERSION_TO_INSTALL} and venv installed successfully."
                            """
                        }
                    } else {
                        echo "Python ${env.PYTHON_VERSION_TO_INSTALL} is already installed."
                    }

                    def pythonVersionOutput = sh(script: "${env.PYTHON_CMD} --version", returnStdout: true).trim()
                    echo "S·ª≠ d·ª•ng Python: ${pythonVersionOutput}"
                }
            }
        }

        stage('Prepare Python Virtual Environment') {
            steps {
                echo "Creating dedicated virtual environment '${VENV_DIR}' for the project using ${PYTHON_CMD}..."
                script {
                    sh "${env.PYTHON_CMD} -m venv ${env.VENV_DIR}"
                    env.VIRTUAL_ENV_BIN = "${pwd()}/${env.VENV_DIR}/bin"
                    env.PATH = "${env.VIRTUAL_ENV_BIN}:${env.PATH}"
                    echo "Virtual environment created at: ${env.VIRTUAL_ENV_BIN}"
                }
            }
        }
        
        // Stage b·∫°n ƒë√£ y√™u c·∫ßu ƒë∆∞·ª£c th√™m v√†o ƒë√¢y
        stage('Download and Configure ChromeDriver') {
            steps {
                script {
                    echo "Downloading ChromeDriver..."
                    // Get the major version of Chrome installed on the server
                    def chromeVersion = sh(script: "google-chrome --version | cut -d ' ' -f3 | cut -d '.' -f1", returnStdout: true).trim()
                    echo "Detected Chrome major version: ${chromeVersion}"

                    // Get the JSON data for last known good versions
                    def apiUrl = "https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions.json"
                    def lastKnownGoodVersionsJson = sh(script: "wget -qO- ${apiUrl}", returnStdout: true).trim()

                    // Use Groovy's built-in JSON parsing for reliability
                    def versionsJson = new groovy.json.JsonSlurper().parseText(lastKnownGoodVersionsJson)
                    def stableVersion = versionsJson.versions.find { it.channel == 'Stable' }?.version
                    
                    if (!stableVersion) {
                        error 'Could not find a stable version in the JSON output.'
                    }

                    def stableMajorVersion = stableVersion.tokenize('.')[0]
                    if (stableMajorVersion != chromeVersion) {
                        error "Mismatch: Chrome major version is ${chromeVersion}, but latest stable chromedriver is for version ${stableMajorVersion}. Please update your Chrome browser."
                    }

                    echo "Detected Stable ChromeDriver version: ${stableVersion}"

                    // Construct and download the ChromeDriver zip file
                    def downloadUrl = "https://storage.googleapis.com/chrome-for-testing-releases/${stableVersion}/linux64/chromedriver-linux64.zip"
                    sh "wget ${downloadUrl} -O chromedriver.zip"

                    // Unzip, set permissions, and add to PATH
                    sh "unzip -o chromedriver.zip"
                    sh "chmod +x chromedriver-linux64/chromedriver"
                    env.PATH = "${pwd()}/chromedriver-linux64:${env.PATH}"
                    echo "ChromeDriver has been placed in PATH for this pipeline run."
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                echo 'Installing dependencies from requirements.txt into the virtual environment...'
                script {
                    sh "pip install --upgrade pip"
                    if (fileExists('requirements.txt')) {
                        sh "pip install -r requirements.txt"
                        echo "Dependencies from requirements.txt installed successfully."
                    } else {
                        echo "Warning: requirements.txt not found. Skipping dependency installation."
                    }
                    sh "pip install robotframework robotframework-seleniumlibrary"
                    echo "Robot Framework and SeleniumLibrary installed successfully."
                }
            }
        }

        stage('Run Robot Tests') {
            steps {
                echo 'Starting Robot Framework tests with demo.robot...'
                // L·ªánh 'robot' s·∫Ω t√¨m th·∫•y chromedriver trong PATH ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p
                sh "robot -d results demo.robot"
                echo 'Robot Framework tests execution finished.'
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished.'
            script {
                if (fileExists("${env.VENV_DIR}")) {
                    echo "Cleaning up virtual environment: ${env.VENV_DIR}"
                    sh "rm -rf ${env.VENV_DIR}"
                    echo "Virtual environment ${env.VENV_DIR} removed."
                }
                
                // D·ªçn d·∫πp ChromeDriver t·∫°m th·ªùi
                if (fileExists("${env.CHROME_DRIVER_DIR}")) {
                    echo "Cleaning up ChromeDriver temporary directory: ${env.CHROME_DRIVER_DIR}"
                    sh "rm -rf ${env.CHROME_DRIVER_DIR}"
                    echo "ChromeDriver directory removed."
                }
            }
            sh "find . -name '*.pyc' -delete || true"
            sh "find . -name '__pycache__' -type d -exec rm -rf {} + || true"
            echo "Other temporary files cleaned up."
        }
        success {
            echo 'Robot Framework tests completed successfully! üéâ'
        }
        failure {
            echo 'Robot Framework tests failed. Check logs for details. ‚ùå'
        }
    }
}
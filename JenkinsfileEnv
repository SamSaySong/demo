pipeline {
    agent any

    environment {
        PYTHON_VERSION_TO_INSTALL = '3.10'
        PYTHON_CMD = "python${env.PYTHON_VERSION_TO_INSTALL}"
        VENV_DIR = "venv_robot_project_py${env.PYTHON_VERSION_TO_INSTALL}"
    }

    stages {
        stage('Setup Environment and Clone Code') {
            steps {
                echo 'Starting pipeline setup...'
                
                // Clone the Git repository
                echo 'Cloning the Git repository...'
                git branch: 'main', url: 'https://github.com/SamSaySong/demo.git' 
                sh 'ls -la'
                
                // Check and Install Python
                echo "Checking for Python ${env.PYTHON_VERSION_TO_INSTALL}..."
                script {
                    def pythonExists = sh(script: "command -v ${env.PYTHON_CMD}", returnStatus: true) == 0

                    if (!pythonExists) {
                        echo "Python ${env.PYTHON_VERSION_TO_INSTALL} not found. Attempting to install..."
                        def defaultPython3Version = sh(script: "python3 --version || true", returnStdout: true).trim()
                        if (defaultPython3Version.startsWith("Python ${env.PYTHON_VERSION_TO_INSTALL}")) {
                            echo "Python3 is already version ${env.PYTHON_VERSION_TO_INSTALL}. Using 'python3' command."
                            env.PYTHON_CMD = 'python3'
                        } else {
                            echo "Warning: Sudo installation requires pre-configured privileges. If this fails, please configure your Jenkins agent."
                            sh """
                                sudo apt update
                                sudo apt install -y software-properties-common
                                sudo add-apt-repository -y ppa:deadsnakes/ppa
                                sudo apt update
                                sudo apt install -y ${env.PYTHON_CMD} ${env.PYTHON_CMD}-venv
                                echo "Python ${env.PYTHON_VERSION_TO_INSTALL} and venv installed successfully."
                            """
                        }
                    } else {
                        echo "Python ${env.PYTHON_VERSION_TO_INSTALL} is already installed."
                    }
                    def pythonVersionOutput = sh(script: "${env.PYTHON_CMD} --version", returnStdout: true).trim()
                    echo "Using Python: ${pythonVersionOutput}"
                }

                // Create a temporary virtual environment
                echo "Creating temporary virtual environment '${VENV_DIR}'..."
                sh "${env.PYTHON_CMD} -m venv ${env.VENV_DIR}"
                env.PATH = "${pwd()}/${env.VENV_DIR}/bin:${env.PATH}"
                echo "Virtual environment created and added to PATH."
            }
        }
        
        stage('Download and Install Dependencies') {
            steps {
                script {
                    echo 'Installing dependencies into the virtual environment...'
                    sh "pip install --upgrade pip"
                    if (fileExists('requirements.txt')) {
                        sh "pip install -r requirements.txt"
                        echo "Dependencies from requirements.txt installed successfully."
                    } else {
                        echo "Warning: requirements.txt not found. Skipping."
                    }
                    sh "pip install robotframework robotframework-seleniumlibrary"
                    echo "Core dependencies installed."

                    // Download ChromeDriver and configure
                    echo "Downloading and configuring ChromeDriver..."
                    def chromeVersion = ""
                    try {
                        chromeVersion = sh(script: "google-chrome --version | cut -d ' ' -f3 | cut -d '.' -f1", returnStdout: true).trim()
                    } catch (Exception e) {
                        echo "Warning: Cannot detect Google Chrome version. Using fallback version."
                        chromeVersion = "138" // Use a known stable version
                    }
                    echo "Detected Chrome major version: ${chromeVersion}"

                    def apiUrl = "https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json"
                    def jsonOutput = sh(script: "curl -s ${apiUrl}", returnStdout: true).trim()
                    
                    // The JsonSlurper call and all subsequent operations must be in a single script block.
                    // This prevents the LazyMap from being serialized across stages.
                    def versionsJson = new groovy.json.JsonSlurper().parseText(jsonOutput)
                    def stableVersionEntry = versionsJson.channels.Stable
                    
                    if (!stableVersionEntry) {
                        error 'Could not find a stable version in the JSON output.'
                    }
                    
                    def downloadUrl = stableVersionEntry.downloads.chromedriver.find { it.platform == 'linux64' }.url
                    echo "Download URL: ${downloadUrl}"

                    sh """
                        wget ${downloadUrl} -O chromedriver.zip
                        unzip -o chromedriver.zip
                        chmod +x chromedriver-linux64/chromedriver
                    """
                    env.PATH = "${pwd()}/chromedriver-linux64:${env.PATH}"
                    echo "ChromeDriver has been placed in PATH for this pipeline run."
                    sh "chromedriver --version"
                }
            }
        }

        stage('Run Robot Tests') {
            steps {
                echo 'Starting Robot Framework tests with demo.robot...'
                sh "robot -d results demo.robot"
                echo 'Robot Framework tests execution finished.'
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished.'
            sh "rm -rf ${env.VENV_DIR} || true"
            sh "rm -rf ${pwd()}/chromedriver-linux64 || true"
            sh "rm -f chromedriver.zip || true"
            sh "find . -name '*.pyc' -delete || true"
            sh "find . -name '__pycache__' -type d -exec rm -rf {} + || true"
            echo "Temporary files and environment cleaned up."
        }
        success {
            echo 'Robot Framework tests completed successfully! üéâ'
        }
        failure {
            echo 'Robot Framework tests failed. Check logs for details. ‚ùå'
        }
    }
}
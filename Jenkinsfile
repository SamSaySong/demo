pipeline {
    agent any // Ho·∫∑c ch·ªâ ƒë·ªãnh m·ªôt Jenkins agent c·ª• th·ªÉ n·∫øu b·∫°n c√≥ nhi·ªÅu node

    // ƒê·ªãnh nghƒ©a c√°c bi·∫øn m√¥i tr∆∞·ªùng cho pipeline
    environment {
        // Ch√∫ng ta s·∫Ω c·ªë g·∫Øng d√πng 'python3.10' tr∆∞·ªõc.
        // ƒê·∫£m b·∫£o Python 3.10 c√≥ tr√™n m√°y ch·ªß Jenkins v√† c√≥ th·ªÉ ƒë∆∞·ª£c t√¨m th·∫•y trong PATH.
        // N·∫øu kh√¥ng, b·∫°n c√≥ th·ªÉ c·∫ßn cung c·∫•p ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi, v√≠ d·ª•: '/usr/bin/python3.10'
        PYTHON_CMD = 'python3.10' // ∆Øu ti√™n s·ª≠ d·ª•ng Python 3.10
        VENV_DIR = 'venv_robot_project_cicd' // T√™n th∆∞ m·ª•c cho m√¥i tr∆∞·ªùng ·∫£o
    }

    stages {
        stage('Checkout Source Code') {
            steps {
                echo 'Starting to clone the Git repository...'
                git branch: 'main', url: 'https://github.com/SamSaySong/demo.git' 
                echo 'Git repository cloned successfully!'
                sh 'ls -la' // Li·ªát k√™ t·∫•t c·∫£ n·ªôi dung th∆∞ m·ª•c ƒë·ªÉ x√°c nh·∫≠n
            }
        }

        stage('Prepare Python Virtual Environment') {
            steps {
                echo "Creating dedicated virtual environment '${VENV_DIR}' for the project using ${PYTHON_CMD}..."
                script {
                    def actualPythonCmd = ''
                    // T√¨m l·ªánh Python 3.10 ho·∫∑c Python 3 chung n·∫øu 3.10 kh√¥ng c√≥
                    if (sh(script: "command -v python3.10", returnStatus: true) == 0) {
                        actualPythonCmd = "python3.10"
                    } else if (sh(script: "command -v python3", returnStatus: true) == 0) {
                        // Ki·ªÉm tra xem python3 c√≥ ph·∫£i l√† 3.10+ kh√¥ng
                        def py3Version = sh(script: "python3 --version", returnStdout: true).trim()
                        if (py3Version.startsWith("Python 3.1") || py3Version.startsWith("Python 3.12")) {
                            actualPythonCmd = "python3"
                        } else {
                            error "L·ªói: Phi√™n b·∫£n Python 3 m·∫∑c ƒë·ªãnh kh√¥ng ph·∫£i 3.10 tr·ªü l√™n. Vui l√≤ng c√†i ƒë·∫∑t python3.10 ho·∫∑c python3.10-venv tr√™n m√°y ch·ªß Jenkins."
                        }
                    } else {
                        error "L·ªói: Kh√¥ng t√¨m th·∫•y l·ªánh Python (python3.10 ho·∫∑c python3). Vui l√≤ng ki·ªÉm tra c√†i ƒë·∫∑t Python tr√™n m√°y ch·ªß Jenkins."
                    }
                    env.PYTHON_CMD = actualPythonCmd // C·∫≠p nh·∫≠t PYTHON_CMD v·ªõi l·ªánh th·ª±c t·∫ø t√¨m ƒë∆∞·ª£c

                    // Ki·ªÉm tra phi√™n b·∫£n Python th·ª±c t·∫ø s·∫Ω d√πng
                    def pythonVersionOutput = sh(script: "${env.PYTHON_CMD} --version", returnStdout: true).trim()
                    echo "S·ª≠ d·ª•ng Python: ${pythonVersionOutput}"
                    
                    // T·∫°o m√¥i tr∆∞·ªùng ·∫£o
                    // B∆Ø·ªöC N√ÄY Y√äU C·∫¶U G√ìI 'python3.10-venv' HO·∫∂C 'python3-venv' TR√äN H·ªÜ TH·ªêNG JENKINS
                    sh "${env.PYTHON_CMD} -m venv ${env.VENV_DIR}"

                    // C·∫≠p nh·∫≠t PATH ƒë·ªÉ c√°c l·ªánh 'pip' v√† 'robot' ch·∫°y t·ª´ m√¥i tr∆∞·ªùng ·∫£o n√†y
                    env.VIRTUAL_ENV_BIN = "${pwd()}/${env.VENV_DIR}/bin"
                    env.PATH = "${env.VIRTUAL_ENV_BIN}:${env.PATH}"
                    echo "Virtual environment created at: ${env.VIRTUAL_ENV_BIN}"
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                echo 'Installing dependencies from requirements.txt into the virtual environment...'
                script {
                    // C√†i ƒë·∫∑t ho·∫∑c n√¢ng c·∫•p pip trong m√¥i tr∆∞·ªùng ·∫£o
                    sh "pip install --upgrade pip"

                    // Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa requirements.txt
                    if (fileExists('requirements.txt')) {
                        sh "pip install -r requirements.txt"
                        echo "Dependencies from requirements.txt installed successfully."
                    } else {
                        echo "Warning: requirements.txt not found. Skipping dependency installation."
                    }

                    // ƒê·∫£m b·∫£o Robot Framework v√† SeleniumLibrary ƒë∆∞·ª£c c√†i ƒë·∫∑t
                    // sh "pip install robotframework robotframework-seleniumlibrary"
                    // echo "Robot Framework and SeleniumLibrary installed successfully."
                }
            }
        }

        stage('Run Robot Tests') {
            steps {
                echo 'Starting Robot Framework tests with demo.robot...'
                // Ch·∫°y Robot Framework test b·∫±ng l·ªánh 'robot' t·ª´ m√¥i tr∆∞·ªùng ·∫£o
                sh "robot -d results demo.robot"
                echo 'Robot Framework tests execution finished.'
            }
        }
    }

    // C√°c h√†nh ƒë·ªông sau khi pipeline ho√†n t·∫•t
    post {
        always {
            echo 'Pipeline finished.'
            // D·ªçn d·∫πp m√¥i tr∆∞·ªùng ·∫£o ƒë·ªÉ ƒë·∫£m b·∫£o workspace s·∫°ch s·∫Ω cho l·∫ßn ch·∫°y ti·∫øp theo
            script {
                if (fileExists("${env.VENV_DIR}")) {
                    echo "Cleaning up virtual environment: ${env.VENV_DIR}"
                    sh "rm -rf ${env.VENV_DIR}" // X√≥a th∆∞ m·ª•c venv v√† t·∫•t c·∫£ n·ªôi dung c·ªßa n√≥
                    echo "Virtual environment ${env.VENV_DIR} removed."
                }
            }
            // Cleanup c√°c file t·∫°m kh√°c n·∫øu c√≥
            sh "find . -name '*.pyc' -delete || true" 
            sh "find . -name '__pycache__' -type d -exec rm -rf {} + || true" 
            echo "Other temporary files cleaned up."
        }
        success {
            echo 'Robot Framework tests completed successfully! üéâ'
        }
        failure {
            echo 'Robot Framework tests failed. Check logs for details. ‚ùå'
        }
    }
}